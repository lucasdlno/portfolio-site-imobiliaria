// backend/index.js

// =======================================================
// PARTE 1: IMPORTAÃ‡Ã•ES E CONFIGURAÃ‡Ã•ES INICIAIS
// =======================================================
require('dotenv').config(); // Garante que as variÃ¡veis de ambiente sejam carregadas
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const path = require('path');

// IMPORTAÃ‡ÃƒO DAS NOSSAS ROTAS SEPARADAS
const imoveisRoutes = require('./routes/imoveis');
const authRoutes = require('./routes/auth');

// =======================================================
// PARTE 2: INICIALIZAÃ‡ÃƒO DO APP E MIDDLEWARES GERAIS
// =======================================================
const app = express();

// ConfiguraÃ§Ãµes de CORS (ajuste 'origin' em produÃ§Ã£o se necessÃ¡rio)
// CÃ“DIGO CORRIGIDO E MAIS ROBUSTO
const allowedOrigins = [
  'http://localhost:3000', // Sua mÃ¡quina para desenvolvimento
  process.env.FRONTEND_URL  // O endereÃ§o do seu site online
];

app.use(cors({
  origin: function (origin, callback) {
    // Permite requisiÃ§Ãµes sem 'origin' (como apps mobile ou Postman) ou se a origem estÃ¡ na lista
    if (!origin || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true
}));
// Middlewares para interpretar o corpo das requisiÃ§Ãµes e cookies
app.use(express.json());
app.use(cookieParser());

// =======================================================
// PARTE 3: MONTANDO AS ROTAS DA API
// =======================================================
// Todas as rotas que comeÃ§arem com /api/imoveis serÃ£o gerenciadas pelo imoveisRoutes
// CÃ“DIGO ATUAL (INCORRETO - causa o conflito)
// CÃ“DIGO CORRIGIDO
// Cada conjunto de rotas tem seu prÃ³prio prefixo, sem conflitos.
app.use('/api/imoveis', imoveisRoutes);
app.use('/api/auth', authRoutes); // Boa prÃ¡tica adicionar /auth para clareza

// Rota de "boas-vindas" para a API, para verificar se estÃ¡ online
app.get('/api', (req, res) => {
  res.json({ message: 'Bem-vindo Ã  API da Gomes ImÃ³veis! ðŸš€' });
});


// =======================================================
// PARTE 4: TRATAMENTO DE ERROS CENTRALIZADO
// =======================================================
// Este middleware especial sÃ³ Ã© executado se ocorrer um erro em alguma rota
app.use((err, req, res, next) => {
  console.error('====================================');
  console.error('ðŸš¨ ERRO NA APLICAÃ‡ÃƒO:', err.stack);
  console.error('====================================');
  
  const statusCode = err.statusCode || 500;
  const message = err.message || 'Ocorreu um erro interno no servidor.';
  
  res.status(statusCode).json({ message });
});


// =======================================================
// PARTE 5: INICIALIZAÃ‡ÃƒO DO SERVIDOR
// =======================================================
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`ðŸš€ Servidor backend rodando em http://localhost:${PORT}`);
});